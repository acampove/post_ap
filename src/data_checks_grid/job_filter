#!/usr/bin/env python3

from DIRAC.Interfaces.API.Dirac import Dirac
from DIRAC.Interfaces.API.Job   import Job
from DIRAC                      import initialize
from DIRAC                      import gLogger

import os
import argparse

from logzero import logger as log
from tqdm    import trange

#---------------------------------------
class data:
    snd_dir = None 
    njobs   = None
    name    = None
    conf    = None
    venv    = None
    mode    = None
#---------------------------------------
def get_job(jobid):
    j = Job()
    j.setCPUTime(36000)
    j.setDestination('LCG.CERN.cern')
    j.setExecutable('run_filter', arguments=f'{data.conf} {data.njobs} {jobid}')
    j.setInputSandbox([f'LFN:/lhcb/user/a/acampove/run3/venv/{data.venv}/dcheck.tar'])
    j.setOutputData(['*.root'], outputPath=f'{data.name}_{data.conf}', outputSE=['LCG.Beijing.cn'])
    j.setName(f'{data.name}_{data.conf}_{jobid:03}')

    return j
#---------------------------------------
def get_args():
    parser = argparse.ArgumentParser(description='Used to send filtering jobs to the grid')
    parser.add_argument('-n', '--name' , type =str, help='Name of job, to identify it' , required=True)
    parser.add_argument('-c', '--conf' , type =str, help='Name of config file'         , required=True)
    parser.add_argument('-j', '--njobs', type =int, help='Number of grid jobs'         , required=True)
    parser.add_argument('-e', '--venv' , type =str, help='Index of virtual environment', required=True)
    parser.add_argument('-m', '--mode' , type =str, help='Run locally or in the grid'  , required=True, choices=['local', 'wms'])

    args = parser.parse_args()

    data.snd_dir = f'{os.getcwd()}/sandbox_{args.conf}'
    data.name    = args.name
    data.conf    = args.conf
    data.njobs   = args.njobs
    data.venv    = args.venv
    data.mode    = args.mode
#---------------------------------------
def main():
    os.makedirs(data.snd_dir, exist_ok=False)
    gLogger.setLevel('warning')
    initialize()
    dirac = Dirac()

    l_jobid = []
    for jobid in trange(data.njobs, ascii=' -'):
        job    = get_job(jobid)
        d_info = dirac.submitJob(job, mode=data.mode)

        try:
            jobid = d_info['JobID']
        except:
            jobid = -1

        l_jobid.append(jobid)

        if 'test' in data.name:
            break

        if data.mode == 'local':
            break

    with open(f'{data.snd_dir}/jobids.out', 'w') as ofile:
        for jobid in l_jobid:
            ofile.write(f'{jobid}\n')
#---------------------------------------
if __name__ == '__main__':
    get_args()
    main()

